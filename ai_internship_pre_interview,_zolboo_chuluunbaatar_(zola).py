# -*- coding: utf-8 -*-
"""AI Internship Pre-Interview, Zolboo Chuluunbaatar (Zola)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lgEvS2c728-5oTaOazyhxVxvWTrjiq6I
"""

class Tensor():
 
    def __init__(self, data, shape):
        self.data = data
        self.shape = shape
        self.tensor = []
 
        # for i in shape:
        #   if i <= 0 or not isinstance(i, int):
        #     raise SystemExit("shape dimensions must be positive integers!")
 
    def shape_data(self):
 
        size = 1  # volume of shape
        for i in self.shape:
            size *= i
 
        length = len(self.data)  # length of data
 
        ext = max(0, size - length)  # padding size
 
        # If size < length, cut off the excess till data is of length 'size'
        self.data = self.data[0:ext + size]
        #  Pad data with 0's till the length is size.
        self.data.extend([0 for i in range(ext)])
 
        # If shape is 1-dimensional
        if len(self.shape) == 1:
            return self.data
 
        # Otherwise, i.e, if shape is 2 or more-dimensional
        arr = []
        n = self.shape[0]
        m = int(size / n)
 
        for i in range(n):
            # Slice data into n equal length arrays
            pre_data = self.data[i*m: (i + 1)*m]
            pre_shape = self.shape[1:]
 
            # Recurrently implement the array
            pre_tensor = Tensor(pre_data, pre_shape)
            pre_arr = pre_tensor.shape_data()
            arr.append(pre_arr)
 
        return arr

data0 = [0, 1, 2, 3, 4, 5, 0.1, 0.2, -3, 1,1,1,1,1]
shape0 = [2,3,2]
tensor0 = Tensor(data0, shape0)

print(tensor0.shape_data())